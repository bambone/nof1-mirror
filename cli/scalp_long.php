<?php
declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Mirror\App\Logger;
use Mirror\App\StateStore;
use Mirror\Infra\Nof1Client;
use Mirror\Infra\BybitClient;
use Mirror\App\Quantizer;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Bootstrap: –∫–æ–Ω—Ñ–∏–≥–∏
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
$global = require __DIR__ . '/../config/config.global.php';
$local  = file_exists(__DIR__ . '/../config/nof1_bybit.local.php')
    ? require __DIR__ . '/../config/nof1_bybit.local.php'
    : require __DIR__ . '/../config/nof1_bybit.example.php';
$cfg = array_replace_recursive($global, $local);

// –õ–æ–≥–≥–µ—Ä: –≤ –∫–æ–Ω—Å–æ–ª—å ‚Äî –≤—Å—ë; –≤ —Ñ–∞–π–ª ‚Äî —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.global.php)
$log = new Logger(
    $cfg['log']['file']  ?? __DIR__ . '/../var/deepseek_follow.log',
    $cfg['log']['level'] ?? 'info'
);

date_default_timezone_set($cfg['app']['timezone'] ?? 'UTC');

// –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è
if (empty($cfg['scalp']['enabled'])) {
    $log->info('üí§ Scalp module disabled (scalp.enabled=false). Exit.');
    exit(0);
}

// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if (empty($cfg['bybit']['api_key']) || str_starts_with((string)$cfg['bybit']['api_key'], 'PUT_')) {
    $log->error('‚ùå Bybit API keys are not set for scalp module.');
    exit(1);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ö–ª–∏–µ–Ω—Ç—ã API
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
$bybit = new BybitClient(
    $cfg['bybit']['base_url'],
    $cfg['bybit']['api_key'],
    $cfg['bybit']['api_secret']
);

$nof1 = new Nof1Client(
    $cfg['nof1']['positions_url'],
    (float)($cfg['nof1']['connect_timeout'] ?? 3.0),
    (float)($cfg['nof1']['timeout'] ?? 7.0)
);

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª—è
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
$log->info('‚ö° Scalp Long module started');

$cat       = $cfg['bybit']['account']['category'] ?? 'linear';
$symbolMap = $cfg['bybit']['symbol_map'] ?? [];

$perTradeCapUSD = (float)($cfg['scalp']['per_trade_notional_cap'] ?? 5.0);   // ‚âà —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –æ–¥–Ω–æ–π –º–∏–∫—Ä–æ—Å–¥–µ–ª–∫–∏
$minFreeUSD     = (float)($cfg['scalp']['min_free_balance_usd'] ?? 15.0);   // –Ω–∏–∂–µ ‚Äî –Ω–µ –≤—Ö–æ–¥–∏–º
$maxConc        = (int)($cfg['scalp']['max_concurrent_scalps'] ?? 1);       // –º–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö ¬´—Å–∫–∞–ª—å–ø-–ª–æ–Ω–≥–æ–≤¬ª
$pollMs         = (int)($cfg['scalp']['poll_interval_ms'] ?? 500);          // –ø–µ—Ä–∏–æ–¥ —Ç–∏–∫–∞

$tagPrefix = 'SCALP'; // clientOrderId –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –£—Ç–∏–ª–∏—Ç—ã
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

/**
 * –ë–µ—Ä—ë–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∏–∑ –º–æ–¥–µ–ª–∏:
 * qty > 0 ‚Üí —Ä–∞–∑—Ä–µ—à—ë–Ω —Å–∫–∞–ª—å–ø-–ª–æ–Ω–≥ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É.
 * qty <= 0 ‚Üí –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
 */
function buildLongAllowedFromModel(array $blocks, string $targetModel, array $symbolMap): array {
    $allowed = [];
    foreach ($blocks as $b) {
        if (($b['id'] ?? '') !== $targetModel) continue;
        foreach (($b['positions'] ?? []) as $sym => $pos) {
            if (!isset($symbolMap[$sym])) continue;
            if ((float)($pos['quantity'] ?? 0) > 0) {
                $allowed[$symbolMap[$sym]] = true;
            }
        }
    }
    return $allowed;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º qty —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–æ—Ç–∞—Ü–∏–æ–Ω–∞–ª ‚âà $perTradeCapUSD, –∏ —Å–Ω–∞–ø–∞–µ–º –∫ —à–∞–≥—É/–º–∏–Ω–∏–º—É–º—É.
 */
function calcScalpQty(BybitClient $bybit, string $cat, string $bybitSymbol, float $perTradeCapUSD): array {
    $ticker = $bybit->getTicker($cat, $bybitSymbol);
    $price  = (float)($ticker['result']['list'][0]['lastPrice'] ?? 0.0);
    if ($price <= 0) {
        return [0.0, 0.0]; // qty, price
    }

    $info = $bybit->getInstrumentsInfo($cat, $bybitSymbol);
    $minQty = 0.0; $step = 0.0;
    if (($info['retCode'] ?? 1) === 0 && !empty($info['result']['list'][0]['lotSizeFilter'])) {
        $f      = $info['result']['list'][0]['lotSizeFilter'];
        $minQty = (float)($f['minOrderQty'] ?? 0.0);
        $step   = (float)($f['qtyStep']     ?? 0.0);
    }

    $rawQty = $perTradeCapUSD / $price;
    $qty    = Quantizer::snapQty($rawQty, max($minQty, 0.0), max($step, 1e-8));

    return [$qty, $price];
}

/**
 * –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö ¬´—Å–∫–∞–ª—å–ø¬ª-–ø–æ–∑–∏—Ü–∏–π —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ (–ø–æ –Ω–∞—à–µ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É clientId).
 * –¢—É—Ç –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –æ—Ä–¥–µ—Ä–∞–º/–ø–æ–∑–∏—Ü–∏—è–º.
 */
function countActiveScalps(BybitClient $bybit, string $cat, string $tagPrefix): int {
    // –ó–∞–≥–ª—É—à–∫–∞: –≤–µ—Ä–Ω—ë–º 0. –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –ø–æ–∑–∏—Ü–∏–π ‚Äî –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ.
    return 0;
}

/**
 * –õ–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤—Ö–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞):
 * —Å—é–¥–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º ¬´–¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ¬ª, —É—Ä–æ–≤–Ω–∏/–ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ç.–ø.
 */
function longTriggerFired(BybitClient $bybit, string $cat, string $symbol): bool {
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å: –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏/–ª–µ–Ω—Ç–∞/–¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ low + pullback
    return false;
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
$running = true;
if (function_exists('pcntl_async_signals')) {
    pcntl_async_signals(true);
    pcntl_signal(SIGINT, function () use (&$running, $log) {
        $log->info('‚èπ Stopping scalp module by SIGINT‚Ä¶');
        $running = false;
    });
}

$targetModel = (string)($cfg['nof1']['model_id'] ?? 'deepseek-chat-v3.1');

while ($running) {
    try {
        // 1) –ë–∞–ª–∞–Ω—Å-—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ–º
        $free = (float)$bybit->getUsdtAvailable();
        $log->debug('free USDT = '. $free);
        if ($free < $minFreeUSD) {
            $log->debug("‚õî free < min_free_balance_usd ({$free} < {$minFreeUSD}) ‚Äî skip tick");
            usleep($pollMs * 1000);
            continue;
        }

        // 2) –ß–∏—Å–ª–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–ª—å–ø-–ø–æ–∑–∏—Ü–∏–π
        $active = countActiveScalps($bybit, $cat, $tagPrefix);
        if ($active >= $maxConc) {
            $log->debug("limit reached: active={$active} / max={$maxConc} ‚Äî skip new entries");
            usleep($pollMs * 1000);
            continue;
        }

        // 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ—Ä—ë–º –¢–û–õ–¨–ö–û –∏–∑ –º–æ–¥–µ–ª–∏ (qty > 0)
        $blocks = $nof1->fetchPositions();
        $longAllowed = buildLongAllowedFromModel($blocks, $targetModel, $symbolMap);

        if (!$longAllowed) {
            $log->debug('no long-bias symbols from model ‚Äî idle');
            usleep($pollMs * 1000);
            continue;
        }

        // 4) –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        foreach (array_keys($longAllowed) as $bybitSymbol) {
            // (–∞) —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
            if ($active >= $maxConc) break;

            // (–±) —Ä–∞—Å—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –ø–æ–¥ ~5$ (–∏–ª–∏ —Ç–æ, —á—Ç–æ –∑–∞–¥–∞–Ω–æ)
            [$qty, $price] = calcScalpQty($bybit, $cat, $bybitSymbol, $perTradeCapUSD);
            if ($qty <= 0.0) {
                $log->debug("skip {$bybitSymbol}: {$perTradeCapUSD} USD is below min order qty at current price");
                continue;
            }

            // (–≤) –¢—Ä–∏–≥–≥–µ—Ä –≤—Ö–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞): —Ç—É—Ç –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å ¬´–¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ + –æ—Ç—Å–∫–æ–∫¬ª
            if (!longTriggerFired($bybit, $cat, $bybitSymbol)) {
                $log->debug("no trigger on {$bybitSymbol} ‚Äî waiting (qty‚âà{$qty}, px‚âà{$price})");
                continue;
            }

            // (–≥) –í–•–û–î (–∫–æ–≥–¥–∞ –≤–∫–ª—é—á–∏–º) ‚Äî –ø–æ —Ä—ã–Ω–∫—É –∏–ª–∏ –ª–∏–º–∏—Ç–æ–º —Å post-only.
            // –°–µ–π—á–∞—Å: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –º–µ—Å—Ç–æ, –≥–¥–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥.
            $clientId = $tagPrefix . '_BUY_' . $bybitSymbol . '_' . date('His');
            $log->action("‚ö° SCALP ENTER Buy {$bybitSymbol} qty={$qty} (~\${$perTradeCapUSD}) cid={$clientId}");

            // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–ö–û–ì–î–ê –†–ï–®–ò–ú –í–ö–õ–Æ–ß–ò–¢–¨):
            // $resp = $bybit->placeMarketOrder($cat, $bybitSymbol, 'Buy', $qty, $clientId);
            // $log->info('resp: ' . ($resp['retMsg'] ?? 'NO_RESP'));

            $active++; // —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç
        }

        usleep($pollMs * 1000);
    } catch (\Throwable $e) {
        $log->error('scalp loop error: ' . $e->getMessage());
        $log->debug($e->getTraceAsString());
        usleep(max(500, $pollMs) * 1000);
    }
}

$log->info('üëã Scalp module stopped');
