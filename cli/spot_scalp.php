<?php

declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Mirror\App\Logger;
use Mirror\App\StateStore;
use Mirror\Infra\BybitClient;
use Mirror\Infra\Nof1Client;
use Mirror\App\Quantizer;

// ---------- config ----------
$global = require __DIR__ . '/../config/config.global.php';
$local  = file_exists(__DIR__ . '/../config/nof1_bybit.local.php')
    ? require __DIR__ . '/../config/nof1_bybit.local.php'
    : require __DIR__ . '/../config/nof1_bybit.example.php';
$cfg = array_replace_recursive($global, $local);

// ---------- loggers ----------
// 1) –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
$reasonFile   = $cfg['log']['spot_file'] ?? (__DIR__ . '/../var/spot_scalp.log');
$fileLevel    = $cfg['log']['file_level']    ?? ($cfg['log']['level'] ?? 'notice');
$consoleLevel = $cfg['log']['console_level'] ?? 'debug';
$log = new Logger($reasonFile, $fileLevel, $consoleLevel);

// 2) —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
$dealsFile = $cfg['log']['spot_deals_file'] ?? (__DIR__ . '/../var/spot_deals.log');
$deals = new Logger($dealsFile, 'notice', 'error');

// –≤—ã–∫–ª—é—á–µ–Ω–æ?
if (empty($cfg['spot_scalp']['enabled'])) {
    $log->info('üí§ Spot scalp disabled (spot_scalp.enabled=false). Exit.');
    exit(0);
}

// ---------- clients ----------
$bybit = new BybitClient(
    $cfg['bybit']['base_url'],
    $cfg['bybit']['api_key'] ?? '',
    $cfg['bybit']['api_secret'] ?? ''
);

$nof1 = Nof1Client::fromConfig($cfg);

$state = new StateStore(__DIR__ . '/../var/state.json');

$log->info('üü¢ Spot Range Scalp started');

$symbolMap = $cfg['bybit']['symbol_map'] ?? [];

// === –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª—è ===
$budgetUSD      = (float)($cfg['spot_scalp']['per_trade_usd'] ?? 20.0);
$minFreeUSD     = (float)($cfg['spot_scalp']['min_free_usd'] ?? 25.0);
$maxSlots       = (int)($cfg['spot_scalp']['max_concurrent'] ?? 2);
$cooldownSec    = (int)($cfg['spot_scalp']['per_symbol_cooldown_sec'] ?? 8); // –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥ –ø–æ—Å–ª–µ BUY

$winMinutes     = (int)($cfg['spot_scalp']['window_min'] ?? 30);
$interval       = (string)($cfg['spot_scalp']['interval'] ?? '1');
$profit_bp_min  = (float)($cfg['spot_scalp']['profit_bp_min'] ?? 20.0);
$profit_bp_max  = (float)($cfg['spot_scalp']['profit_bp_max'] ?? 60.0);

$feesMaker = (float)($cfg['spot_scalp']['fees']['maker'] ?? 0.0002);
$feesTaker = (float)($cfg['spot_scalp']['fees']['taker'] ?? 0.00055);
$slipBp    = (float)($cfg['spot_scalp']['fees']['slippage_bp'] ?? 2.0);

$minOrderValueUsdCfg = (float)($cfg['bybit']['account']['min_order_value_usd'] ?? 5.0); // —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –ø–æ $-–º–∏–Ω–∏–º—É–º—É

$allowNoBiasIfApiFail = (bool)($cfg['spot_scalp']['allow_no_bias_on_api_fail'] ?? false);

// === helpers ===============================================================

function longBiasSymbols(array $blocks, array $symbolMap, string $modelId): array
{
    $allow = [];
    foreach ($blocks as $b) {
        if (($b['id'] ?? '') !== $modelId) continue;
        foreach ($b['positions'] ?? [] as $sym => $pos) {
            $qty = (float)($pos['quantity'] ?? 0);
            if ($qty > 0 && isset($symbolMap[$sym])) {
                $allow[$symbolMap[$sym]] = true; // Bybit-—Ç–∏–∫–µ—Ä
            }
        }
    }
    return array_keys($allow);
}

// ==========================================================================


// ---- –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è $symbolMap –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ü–ï–†–ï–î while(true) ----
$quote = $cfg['bybit']['account']['symbol_quote'] ?? 'USDT';

function baseCoinFromSymbol(string $sym, string $quote = 'USDT'): string
{
    return str_ends_with($sym, $quote) ? substr($sym, 0, -strlen($quote)) : $sym;
}

// –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∞–≤—Ç–æ-–ø–æ–¥—Ö–≤–∞—Ç —Å–ø–æ—Ç–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ state
foreach (($cfg['bybit']['symbol_map'] ?? []) as $modelSym => $bybitSymbol) {
    $hold = $state->get($bybitSymbol, 'spot_hold', null);
    $holdingQty = (float)($hold['qty'] ?? 0);

    if ($holdingQty > 0) continue; // —É–∂–µ –∑–Ω–∞–µ–º –ø—Ä–æ –ø–æ–∑–∏—Ü–∏—é

    // —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç –Ω–∞ UTA –ø–æ –±–∞–∑–æ–≤–æ–π –º–æ–Ω–µ—Ç–µ?
    $base = baseCoinFromSymbol($bybitSymbol, $quote);
    $freeBase = $bybit->getAvailable('UNIFIED', $base);

    if ($freeBase > 0) {
        // –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π last, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –≤ –ø–ª—é—Å –ø—Ä–æ–¥–∞—Å—Ç –ø–æ–∑–∂–µ
        $kl = $bybit->getKlines('spot', $bybitSymbol, '1', 3);
        $rows = $kl['result']['list'] ?? [];
        $last = $rows ? (float)end($rows)[4] : 0.0;

        if ($last > 0) {
            // –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç—â–µ–ª–∫–Ω—É—Ç—å –ø–æ —à–∞–≥—É –ª–æ—Ç–∞
            $info = $bybit->getSpotLots($bybitSymbol);
            $step = 0.0;
            $minQty = 0.0;
            if (($info['retCode'] ?? 1) === 0) {
                $f = $info['result']['list'][0]['lotSizeFilter'] ?? [];
                $minQty = (float)($f['minOrderQty'] ?? 0.0);
                $step   = (float)($f['qtyStep'] ?? 0.0);
            }
            $qty = $step > 0
                ? Mirror\App\Quantizer::snapQty($freeBase, max($minQty, 0.0), $step)
                : $freeBase;

            if ($qty > 0) {
                $state->set($bybitSymbol, 'spot_hold', ['qty' => $qty, 'entry' => $last]);
                $log->info("ü§ù –ü–æ–¥—Ö–≤–∞—Ç–∏–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–æ—Ç {$bybitSymbol}: qty={$qty}, entry‚âà{$last}");
            }
        }
    }
}




$lastAllowed = []; // –∫—ç—à bias

while (true) {
    try {
        // 0) –±–∞–ª–∞–Ω—Å
        $free = $bybit->getAnyUsdtAvailable(false);
        if ($free < $minFreeUSD) {
            $log->debug("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: free={$free} < {$minFreeUSD} ‚Äî –∂–¥—ë–º");
            usleep(700_000);
            continue;
        }

        // 1) —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ bias –º–æ–¥–µ–ª–∏ (+–∫—ç—à/—Ñ–æ–ª–±—ç–∫–∏)
        $modelId = (string)($cfg['nof1']['model_id'] ?? 'deepseek-chat-v3.1');
        $allowed = [];
        try {
            $blocks  = $nof1->fetchPositions();
            $allowed = longBiasSymbols($blocks, $symbolMap, $modelId);
            if ($allowed) {
                $lastAllowed = $allowed;
            } else {
                $log->debug('bias: –ø—É—Å—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–¥–∞—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
                $allowed = $lastAllowed;
            }
        } catch (\Throwable $e) {
            $log->warn('bias: nof1 fetch failed, using lastAllowed; ' . $e->getMessage());
            $allowed = $lastAllowed;
        }

        if (!$allowed) {
            if ($allowNoBiasIfApiFail) {
                $allowed = array_values($symbolMap);
                $log->warn('bias: –ø—É—Å—Ç–æ, –Ω–æ allow_no_bias_on_api_fail=true ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –º–∞–ø–ø–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
            } else {
                $log->debug('‚è≥ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (bias –ø—É—Å—Ç) ‚Äî –∂–¥—ë–º');
                usleep(650_000);
                continue;
            }
        }

        // 2) –ø–æ–¥—Å—á—ë—Ç –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–¢–û–õ–¨–ö–û –ø–æ state; –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∫–æ—à–µ–ª—ë–∫!)
        $openSlots = 0;
        foreach ($allowed as $s) {
            $h = $state->get($s, 'spot_hold', null);
            if ($h && ($h['qty'] ?? 0) > 0) {
                $openSlots++;
                $log->debug(sprintf("üì¶ HOLD %s: qty=%s entry=%s", $s, $h['qty'], $h['entry']));
            }
        }
        if ($openSlots >= $maxSlots) {
            $log->debug("‚è≥ –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π: –∑–∞–Ω—è—Ç–æ {$openSlots}/{$maxSlots} ‚Äî –∂–¥—ë–º");
            usleep(600_000);
            continue;
        }

        // 3) –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        foreach ($allowed as $bybitSymbol) {
            // —Å–≤–µ—á–∏ –≤ –æ–∫–Ω–µ
            $need = max(10, (int)ceil($winMinutes / max(1, (int)$interval)));
            $kl   = $bybit->getKlines('spot', $bybitSymbol, $interval, $need);
            $rows = $kl['result']['list'] ?? [];
            if (!$rows) {
                $log->debug("üìâ {$bybitSymbol}: –Ω–µ—Ç —Å–≤–µ—á–µ–π (kline –ø—É—Å—Ç) ‚Äî –ø—Ä–æ–ø—É—Å–∫");
                continue;
            }

            // v5: [startTs, open, high, low, close, volume, turnover]
            $lows = [];
            $highs = [];
            $closes = [];
            foreach ($rows as $r) {
                $highs[]  = (float)$r[2];
                $lows[]   = (float)$r[3];
                $closes[] = (float)$r[4];
            }
            $last = end($closes);
            if ($last <= 0) {
                $log->debug("üìâ {$bybitSymbol}: last<=0 ‚Äî –ø—Ä–æ–ø—É—Å–∫");
                continue;
            }

            $minWin = min($lows);
            $maxWin = max($highs);
            if ($minWin <= 0 || $maxWin <= $minWin) {
                $log->debug("üìè {$bybitSymbol}: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (min={$minWin}, max={$maxWin}) ‚Äî –ø—Ä–æ–ø—É—Å–∫");
                continue;
            }

            // –¥–∏–∞–ø–∞–∑–æ–Ω –∏ —Ü–µ–ª—å
            $rangePct  = ($maxWin - $minWin) / $minWin;
            $midBp     = ($rangePct * 10000) / 2;
            $targetBp  = min(max($profit_bp_min, $midBp), $profit_bp_max);
            $targetPct = $targetBp / 10000.0;

            // round-trip cost (taker+taker) + —Å–ª–∏–ø–ø–µ–¥–∂
            $roundTripCostPct = ($feesTaker + $feesTaker) + ($slipBp / 10000.0);
            $needPct          = $targetPct + $roundTripCostPct;

            // –ø–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0..1]
            $rel = ($last - $minWin) / ($maxWin - $minWin);

            $log->debug(sprintf(
                "üßÆ %s: min=%.6f max=%.6f last=%.6f rel=%.2f%% range=%.2f%% target‚âà%.2f%% costs‚âà%.2f%% need‚âà%.2f%%",
                $bybitSymbol,
                $minWin,
                $maxWin,
                $last,
                $rel * 100,
                $rangePct * 100,
                $targetPct * 100,
                $roundTripCostPct * 100,
                $needPct * 100
            ));

            // –ª–æ—Ç-—Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –°–ü–û–¢–ê
            $info = $bybit->getSpotLots($bybitSymbol);
            $step = 0.0;
            $minQty = 0.0;
            $basePrec = 8;
            $minOrderAmt = 0.0;
            if (($info['retCode'] ?? 1) === 0 && !empty($info['result']['list'][0]['lotSizeFilter'])) {
                $f = $info['result']['list'][0]['lotSizeFilter'];
                $minQty      = (float)($f['minOrderQty'] ?? 0.0);
                $step        = (float)($f['qtyStep'] ?? 0.0);
                $basePrec    = (int)($f['basePrecision'] ?? 8);
                // –Ω–∞ —Å–ø–æ—Ç–µ —É Bybit –±—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å—É–º–º–µ:
                if (!empty($info['result']['list'][0]['priceFilter']['minOrderAmt'])) {
                    $minOrderAmt = (float)$info['result']['list'][0]['priceFilter']['minOrderAmt'];
                }
            }
            $log->debug("üî¢ {$bybitSymbol}: lotFilter minQty={$minQty} step={$step} basePrec={$basePrec} minOrderAmt={$minOrderAmt}");

            // —Ç–µ–∫—É—â–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ + –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥
            $hold          = $state->get($bybitSymbol, 'spot_hold', null);
            $holdingQty    = (float)($hold['qty'] ?? 0.0);
            $holdingEntry  = (float)($hold['entry'] ?? 0.0);
            $lastBuyTs     = (int)($state->get($bybitSymbol, 'last_buy_ts', 0) ?? 0);
            if ($holdingQty <= 0 && $lastBuyTs > 0 && (time() - $lastBuyTs) < $cooldownSec) {
                $log->debug("üßä {$bybitSymbol}: cooldown –ø–æ—Å–ª–µ BUY –µ—â—ë " . ($cooldownSec - (time() - $lastBuyTs)) . "s ‚Äî –ø—Ä–æ–ø—É—Å–∫ –≤—Ö–æ–¥–∞");
                continue;
            }
            // ========== –õ–û–ì–ò–ö–ê –í–•–û–î–ê ==========
            if ($holdingQty <= 0) {
                if ($rel <= 0.20) {
                    // —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å qty ‚âà $budgetUSD
                    $rawQty = $budgetUSD / $last;

                    // —É—á–µ—Å—Ç—å min order value ($) ‚Äî –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –∏–∑ config –∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª)
                    $minOrderUsd = max($minOrderValueUsdCfg, $minOrderAmt > 0 ? $minOrderAmt : 0.0);
                    if ($minOrderUsd > 0 && ($rawQty * $last) < $minOrderUsd) {
                        $rawQty = $minOrderUsd / $last;
                    }

                    // –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å step ‚Äî –ø–æ step, –∏–Ω–∞—á–µ –ø–æ precision
                    if ($step > 0) {
                        $qty = Quantizer::snapQty($rawQty, max($minQty, 0.0), $step);
                    } else {
                        $qty = max($rawQty, $minQty);
                        $qty = (float) number_format($qty, $basePrec, '.', '');
                    }

                    // –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ 0
                    if ($qty <= 0) {
                        $log->debug("üö´ {$bybitSymbol}: qty –ø–æ—Å–ª–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è = 0 ‚Äî –ø—Ä–æ–ø—É—Å–∫");
                        continue;
                    }

                    $valUsd = $qty * $last;
                    $log->debug(sprintf(
                        "‚úÖ –í–•–û–î-–ö–ê–ù–î–ò–î–ê–¢ %s: rel=%.2f%%; qty‚âà%s (~$%.2f) ‚Üí BUY‚Ä¶",
                        $bybitSymbol,
                        $rel * 100,
                        $qty,
                        $valUsd
                    ));

                    // BUY market (—Å—Ç—Ä–æ–≥–æ –°–ü–û–¢) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π orderLinkId
                    $clid = 'SPOTIN_' . date('His');
                    $resp = $bybit->placeSpotMarket($bybitSymbol, 'Buy', $qty, $clid);

                    if (($resp['retCode'] ?? 1) === 0) {
                        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                        $state->set($bybitSymbol, 'spot_hold', [
                            'qty'   => $qty,
                            'entry' => $last,
                        ]);
                        $state->set($bybitSymbol, 'last_buy_ts', time());

                        $log->action("üü© BUY {$bybitSymbol} qty={$qty} @~{$last} (‚âà$" . round($valUsd, 2) . ")");
                        $deals->action("BUY {$bybitSymbol} qty={$qty} ~{$last} usd‚âà" . round($valUsd, 2));

                        // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ –µ—Å—Ç—å)
                        if (method_exists($bybit, 'getExecutions')) {
                            $fills = $bybit->getExecutions('spot', $bybitSymbol, $clid, 20);
                            if (($fills['retCode'] ?? 1) === 0) {
                                foreach ($fills['result']['list'] ?? [] as $fill) {
                                    $px = $fill['execPrice'] ?? null;
                                    $q  = $fill['execQty']   ?? null;
                                    $id = $fill['execId']    ?? '';
                                    if ($px && $q) {
                                        $deals->action("FILL BUY {$bybitSymbol} execId={$id} qty={$q} price={$px}");
                                    }
                                }
                            }
                        }

                        break; // –æ–¥–∏–Ω –≤—Ö–æ–¥ –∑–∞ —Ç–∏–∫
                    } else {
                        $log->warn("‚õî BUY fail {$bybitSymbol}: " . ($resp['retMsg'] ?? 'NO_RESP'));
                    }
                } else {
                    $log->debug(sprintf(
                        "‚Ü©Ô∏è %s: –µ—â—ë –≤—ã—Å–æ–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞ (rel=%.2f%% > 20%% –Ω–∏–∑–∞) ‚Äî –∂–¥—ë–º",
                        $bybitSymbol,
                        $rel * 100
                    ));
                }
            }


            // ========== –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê ==========
            else {
                $takeByTarget = $holdingEntry * (1.0 + $needPct);
                $takeByRange  = $maxWin * 0.995;
                $isProfit     = $last > $holdingEntry;

                $log->debug(sprintf(
                    "üéØ %s: hold qty=%.8f entry=%.6f last=%.6f need>=%.4f (%.2f%%) / range<=%.6f ‚Üí profit=%s",
                    $bybitSymbol,
                    $holdingQty,
                    $holdingEntry,
                    $last,
                    $needPct,
                    $needPct * 100,
                    $takeByRange,
                    $isProfit ? 'yes' : 'no'
                ));

                if ($isProfit && ($last >= $takeByTarget || $last >= $takeByRange)) {
                    // –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ SELL
                    if ($step > 0) {
                        $sellQty = Quantizer::snapQty($holdingQty, max($minQty, 0.0), $step);
                    } else {
                        $sellQty = (float)number_format($holdingQty, $basePrec, '.', '');
                    }

                    if ($sellQty <= 0) {
                        $log->debug("üö´ {$bybitSymbol}: sellQty –ø–æ—Å–ª–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è = 0 ‚Äî –ø—Ä–æ–ø—É—Å–∫");
                        continue;
                    }

                    $resp = $bybit->placeSpotMarket($bybitSymbol, 'Sell', $sellQty, 'SPOTOUT_' . date('His'));
                    if (($resp['retCode'] ?? 1) === 0) {
                        $profitPct = ($last / max($holdingEntry, 1e-12) - 1.0) * 100.0;
                        $state->set($bybitSymbol, 'spot_hold', ['qty' => 0.0, 'entry' => 0.0]);
                        $log->action("üü• SELL {$bybitSymbol} qty={$sellQty} @~{$last} (P‚âà" . round($profitPct, 2) . "%)");
                        $deals->action("SELL {$bybitSymbol} qty={$sellQty} ~{$last} profit‚âà" . round($profitPct, 2) . "%");
                        break; // –æ–¥–∏–Ω –≤—ã—Ö–æ–¥ –∑–∞ —Ç–∏–∫
                    } else {
                        $log->warn("‚õî SELL fail {$bybitSymbol}: " . ($resp['retMsg'] ?? 'NO_RESP'));
                    }
                } else {
                    $needPct100 = round($needPct * 100, 3);
                    $log->debug("‚è± {$bybitSymbol}: –¥–µ—Ä–∂–∏–º. last={$last} < take(min)={$takeByTarget}; need>=+{$needPct100}% –∏/–∏–ª–∏ –≤–µ—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞.");
                }
            }
        }

        usleep(800_000);
    } catch (\Throwable $e) {
        $log->error("spot scalp error: " . $e->getMessage());
        usleep(900_000);
    }
}
